{
  "openapi": "3.1.0",
  "info": {
    "title": "FastAPI",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.trychannel3.com",
      "description": "Production environment"
    }
  ],
  "paths": {
    "/v0/search": {
      "post": {
        "tags": [
          "channel3-api"
        ],
        "summary": "Search",
        "description": "Search for products.",
        "operationId": "search_v0_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  },
                  "type": "array",
                  "title": "Response Search V0 Search Post"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "query"
                      ],
                      "msg": "field required",
                      "type": "value_error.missing"
                    }
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/products/{product_id}": {
      "get": {
        "tags": [
          "channel3-api"
        ],
        "summary": "Get Product Detail",
        "description": "Get detailed information about a specific product by its ID.",
        "operationId": "get_product_detail_v0_products__product_id__get",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Product Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetail"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "query"
                      ],
                      "msg": "field required",
                      "type": "value_error.missing"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Product with ID 'xyz123' not found"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v0/brands": {
      "get": {
        "tags": [
          "channel3-api"
        ],
        "summary": "Get Brands",
        "description": "Get all brands that the vendor currently sells.",
        "operationId": "get_brands_v0_brands_get",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Query"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Brand_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "query"
                      ],
                      "msg": "field required",
                      "type": "value_error.missing"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v0/brands/{brand_id}": {
      "get": {
        "tags": [
          "channel3-api"
        ],
        "summary": "Get Brand Detail",
        "description": "Get detailed information for a specific brand by its ID.",
        "operationId": "get_brand_detail_v0_brands__brand_id__get",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "brand_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Brand Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Brand"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": [
                    {
                      "loc": [
                        "body",
                        "query"
                      ],
                      "msg": "field required",
                      "type": "value_error.missing"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal Server Error"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Brand not found",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Brand with ID 'xyz123' not found"
                },
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v0/customers": {
      "post": {
        "tags": [
          "channel3-api"
        ],
        "summary": "Create Customer",
        "description": "Register a new customer in Channel3. A customer can be either a Person or an Entity (company).",
        "operationId": "create_customer_v0_customers_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/PersonCustomerCreateRequest" },
                  { "$ref": "#/components/schemas/EntityCustomerCreateRequest" }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "person": "#/components/schemas/PersonCustomerCreateRequest",
                    "entity": "#/components/schemas/EntityCustomerCreateRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/PersonCustomer" },
                    { "$ref": "#/components/schemas/EntityCustomer" }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "person": "#/components/schemas/PersonCustomer",
                      "entity": "#/components/schemas/EntityCustomer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input"
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication"
          },
          "409": {
            "description": "Conflict - Customer already exists"
          },
          "422": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/v0/customers/{customer_id}": {
      "get": {
        "tags": ["channel3-api"],
        "summary": "Get Customer",
        "description": "Retrieve a customer (person or entity) by ID.",
        "operationId": "get_customer_v0_customers_customer_id_get",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Unique customer identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/PersonCustomer" },
                    { "$ref": "#/components/schemas/EntityCustomer" }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "person": "#/components/schemas/PersonCustomer",
                      "entity": "#/components/schemas/EntityCustomer"
                    }
                  }
                }
              }
            }
          },
          "404": { "description": "Customer not found" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "500": { "description": "Internal Server Error" }
        },
        "security": [ { "APIKeyHeader": [] } ]
      },
      "patch": {
        "tags": ["channel3-api"],
        "summary": "Update Customer",
        "description": "Update a customer (person or entity) by ID. Only provided fields will be updated.",
        "operationId": "update_customer_v0_customers_customer_id_patch",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Unique customer identifier"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  { "$ref": "#/components/schemas/PersonCustomerUpdateRequest" },
                  { "$ref": "#/components/schemas/EntityCustomerUpdateRequest" }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "person": "#/components/schemas/PersonCustomerUpdateRequest",
                    "entity": "#/components/schemas/EntityCustomerUpdateRequest"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    { "$ref": "#/components/schemas/PersonCustomer" },
                    { "$ref": "#/components/schemas/EntityCustomer" }
                  ],
                  "discriminator": {
                    "propertyName": "type",
                    "mapping": {
                      "person": "#/components/schemas/PersonCustomer",
                      "entity": "#/components/schemas/EntityCustomer"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request - Invalid input" },
          "404": { "description": "Customer not found" },
          "401": { "description": "Unauthorized - Invalid or missing authentication" },
          "409": { "description": "Conflict - Update conflict" },
          "422": { "description": "Validation Error" },
          "500": { "description": "Internal Server Error" }
        },
        "security": [ { "APIKeyHeader": [] } ]
      }
    },
    "/v0/earnings": {
      "get": {
        "tags": ["channel3-api"],
        "summary": "Get My Earnings",
        "description": "Get earnings information for the authenticated user.",
        "operationId": "get_earnings_v0_earnings_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/v0/sells": {
      "get": {
        "tags": ["channel3-api"],
        "summary": "Get Customer Sells",
        "description": "Get paginated list of customer sells with optional filtering.",
        "operationId": "get_customer_sells_v0_sells_get",
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "null" }
              ],
              "title": "Product Id"
            },
            "description": "Filter by product ID"
          },
          {
            "name": "brand_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "null" }
              ],
              "title": "Brand Id"
            },
            "description": "Filter by brand ID"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "null" }
              ],
              "title": "Customer Id"
            },
            "description": "Filter by customer ID"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Sell_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/v0/sells/summary": {
      "get": {
        "tags": ["channel3-api"],
        "summary": "Get Customer Sells Summary",
        "description": "Get summary statistics for customer sells.",
        "operationId": "get_customer_sells_summary_v0_sells_summary_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SellsSummary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/v0/clicks": {
      "get": {
        "tags": ["channel3-api"],
        "summary": "Get Customer Clicks",
        "description": "Get paginated list of customer clicks with optional filtering.",
        "operationId": "get_customer_clicks_v0_clicks_get",
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "null" }
              ],
              "title": "Product Id"
            },
            "description": "Filter by product ID"
          },
          {
            "name": "brand_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "null" }
              ],
              "title": "Brand Id"
            },
            "description": "Filter by brand ID"
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                { "type": "string" },
                { "type": "null" }
              ],
              "title": "Customer Id"
            },
            "description": "Filter by customer ID"
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1,
              "title": "Page"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedResponse_Click_"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/v0/clicks/summary": {
      "get": {
        "tags": ["channel3-api"],
        "summary": "Get Customer Clicks Summary",
        "description": "Get summary statistics for customer clicks.",
        "operationId": "get_customer_clicks_summary_v0_clicks_summary_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClicksSummary"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "missing_key": {
                    "summary": "Missing API Key",
                    "value": {
                      "detail": "Unauthorized. Missing authentication key. Make sure to attach an x-api-key with your request. Need help? Reach out to founders@trychannel3.com."
                    }
                  },
                  "invalid_key": {
                    "summary": "Invalid API Key",
                    "value": {
                      "detail": "API key was provided but is invalid. Need help? Reach out to founders@trychannel3.com."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    },
    "/v0/customer-links": {
      "post": {
        "tags": ["channel3-api"],
        "summary": "Get Customer Affiliation Link",
        "description": "Get the affiliation link for a specific customer and product.",
        "operationId": "get_customer_affiliation_link_v0_customer_links_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAffiliationLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The affiliation link URL"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Customer or product not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    }
  },
  "webhooks": {
    "customer-sell": {
      "post": {
        "tags": ["channel3-api"],
        "summary": "Webhook for Customer Sell",
        "description": "Webhook endpoint to receive customer sell notifications.",
        "operationId": "webhook_customer_sell",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SellWebhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Webhook processed successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid webhook data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": {
                  "detail": "Internal Server Error"
                }
              }
            }
          }
        },
        "security": [{ "APIKeyHeader": [] }]
      }
    }
  },
  "components": {
    "schemas": {
      "AvailabilityStatus": {
        "type": "string",
        "enum": [
          "InStock",
          "LimitedAvailability",
          "PreOrder",
          "BackOrder",
          "SoldOut",
          "OutOfStock",
          "Discontinued",
          "Unknown"
        ],
        "title": "AvailabilityStatus"
      },
      "Brand": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "logo_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Logo Url"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "Brand"
      },
      "ErrorResponse": {
        "properties": {
          "detail": {
            "title": "Detail"
          }
        },
        "type": "object",
        "required": [
          "detail"
        ],
        "title": "ErrorResponse"
      },
      "PaginatedResponse_Brand_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Brand"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "PaginatedResponse[Brand]"
      },
      "PaginationMeta": {
        "properties": {
          "current_page": {
            "type": "integer",
            "title": "Current Page"
          },
          "page_size": {
            "type": "integer",
            "title": "Page Size"
          },
          "total_count": {
            "type": "integer",
            "title": "Total Count"
          },
          "total_pages": {
            "type": "integer",
            "title": "Total Pages"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More"
          },
          "next_page": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next Page"
          },
          "prev_page": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prev Page"
          }
        },
        "type": "object",
        "required": [
          "current_page",
          "page_size",
          "total_count",
          "total_pages",
          "has_more"
        ],
        "title": "PaginationMeta",
        "description": "Pagination metadata for responses"
      },
      "Price": {
        "properties": {
          "price": {
            "type": "integer",
            "title": "Price",
            "description": "The current price of the product in USD cents, including any discounts."
          },
          "compare_at_price": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Compare At Price",
            "description": "The original price of the product in USD cents before any discounts."
          }
        },
        "type": "object",
        "required": [
          "price"
        ],
        "title": "Price"
      },
      "Product": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "brand_name": {
            "type": "string",
            "title": "Brand Name"
          },
          "image_url": {
            "type": "string",
            "title": "Image Url"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/Variant"
            },
            "type": "array",
            "title": "Variants",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "score",
          "url",
          "title",
          "brand_name",
          "image_url",
          "price",
          "availability"
        ],
        "title": "Product",
        "description": "A product"
      },
      "ProductDetail": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "url": {
            "type": "string",
            "title": "Url"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "brand_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Id"
          },
          "brand_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Name"
          },
          "image_urls": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Urls"
          },
          "price": {
            "$ref": "#/components/schemas/Price"
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityStatus"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "male",
                  "female",
                  "unisex"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "materials": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Materials"
          },
          "key_features": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key Features"
          },
          "variants": {
            "items": {
              "$ref": "#/components/schemas/Variant"
            },
            "type": "array",
            "title": "Variants",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "id",
          "url",
          "title",
          "price",
          "availability"
        ],
        "title": "ProductDetail",
        "description": "A product with detailed information"
      },
      "SearchFilterPrice": {
        "properties": {
          "min_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Price",
            "description": "Minimum price, in dollars and cents"
          },
          "max_price": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Max Price",
            "description": "Maximum price, in dollars and cents"
          }
        },
        "type": "object",
        "title": "SearchFilterPrice",
        "description": "Price filter. Values are inclusive."
      },
      "SearchFilters": {
        "properties": {
          "brand_ids": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Brand Ids",
            "description": "List of brand IDs"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string",
                "enum": [
                  "male",
                  "female",
                  "unisex"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "price": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SearchFilterPrice"
              },
              {
                "type": "null"
              }
            ],
            "description": "Price filter. Values are inclusive."
          },
          "availability": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/AvailabilityStatus"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability",
            "description": "List of availability statuses"
          }
        },
        "type": "object",
        "title": "SearchFilters"
      },
      "SearchRequest": {
        "properties": {
          "query": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Query"
          },
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "base64_image": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base64 Image"
          },
          "limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Limit",
            "default": 20
          },
          "filters": {
            "$ref": "#/components/schemas/SearchFilters",
            "default": {}
          }
        },
        "type": "object",
        "title": "SearchRequest"
      },
      "Variant": {
        "properties": {
          "product_id": {
            "type": "string",
            "title": "Product Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "image_url": {
            "type": "string",
            "title": "Image Url"
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "title",
          "image_url"
        ],
        "title": "Variant"
      },
      "PersonCustomerCreateRequest": {
        "type": "object",
        "required": ["type", "first_name", "last_name", "website_url"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["person"],
            "description": "Discriminator for person customer type"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the person"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the person"
          },
          "website_url": {
            "type": "string",
            "description": "Website URL"
          },
          "socials_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of social media URLs"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          }
        },
        "anyOf": [
          { "required": ["email"] },
          { "required": ["phone_number"] }
        ]
      },
      "EntityCustomerCreateRequest": {
        "type": "object",
        "required": ["type", "company_name", "website_url"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["entity"],
            "description": "Discriminator for entity customer type"
          },
          "company_name": {
            "type": "string",
            "description": "Name of the company"
          },
          "website_url": {
            "type": "string",
            "description": "Website URL"
          },
          "socials_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of social media URLs"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          }
        },
        "anyOf": [
          { "required": ["email"] },
          { "required": ["phone_number"] }
        ]
      },


      "PersonCustomer": {
        "type": "object",
        "required": ["id", "type", "first_name", "last_name", "website_url", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique customer identifier"
          },
          "type": {
            "type": "string",
            "enum": ["person"],
            "description": "Discriminator for person customer type"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the person"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the person"
          },
          "website_url": {
            "type": "string",
            "description": "Website URL"
          },
          "socials_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of social media URLs"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the customer was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the customer was last updated"
          }
        }
      },
      "EntityCustomer": {
        "type": "object",
        "required": ["id", "type", "company_name", "website_url", "created_at", "updated_at"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique customer identifier"
          },
          "type": {
            "type": "string",
            "enum": ["entity"],
            "description": "Discriminator for entity customer type"
          },
          "company_name": {
            "type": "string",
            "description": "Name of the company"
          },
          "website_url": {
            "type": "string",
            "description": "Website URL"
          },
          "socials_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of social media URLs"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the customer was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the customer was last updated"
          }
        }
      },
      "PersonCustomerUpdateRequest": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["person"],
            "description": "Discriminator for person customer type"
          },
          "first_name": {
            "type": "string",
            "description": "First name of the person"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the person"
          },
          "website_url": {
            "type": "string",
            "description": "Website URL"
          },
          "socials_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of social media URLs"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          }
        }
      },
      "EntityCustomerUpdateRequest": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["entity"],
            "description": "Discriminator for entity customer type"
          },
          "company_name": {
            "type": "string",
            "description": "Name of the company"
          },
          "website_url": {
            "type": "string",
            "description": "Website URL"
          },
          "socials_urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of social media URLs"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Email address"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number"
          }
        }
      },
      "Earnings": {
        "type": "object",
        "required": ["total_earnings", "period"],
        "properties": {
          "total_earnings": {
            "type": "integer",
            "description": "Total earnings amount in USD cents"
          },
          "period": {
            "type": "string",
            "enum": ["daily", "weekly", "monthly", "yearly", "all_time"],
            "description": "Time period for earnings"
          },
          "commission_rate": {
            "type": "integer",
            "description": "Commission rate percentage"
          },
          "total_sales": {
            "type": "integer",
            "description": "Total sales amount in USD cents"
          },
          "total_commission": {
            "type": "integer",
            "description": "Total commission earned in USD cents"
          }
        },
        "title": "Earnings"
      },
      "Sell": {
        "type": "object",
        "required": ["id", "product", "brand", "sale_amount", "commission", "sold_at"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique sell identifier"
          },
          "product": {
            "$ref": "#/components/schemas/Product",
            "description": "Product information"
          },
          "brand": {
            "$ref": "#/components/schemas/Brand",
            "description": "Brand information"
          },
          "sale_amount": {
            "type": "integer",
            "description": "Sale amount in USD cents"
          },
          "commission": {
            "type": "integer",
            "description": "Commission earned in USD cents"
          },
          "sold_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the sale occurred"
          },
          "customer_id": {
            "anyOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "description": "Customer ID (if available)"
          }
        },
        "title": "Sell"
      },
      "PaginatedResponse_Sell_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Sell"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "PaginatedResponse[Sell]"
      },
      "SellsSummary": {
        "type": "object",
        "required": ["total_sales", "total_commission", "total_sells"],
        "properties": {
          "total_sales": {
            "type": "integer",
            "description": "Total sales amount in USD cents"
          },
          "total_commission": {
            "type": "integer",
            "description": "Total commission earned in USD cents"
          },
          "total_sells": {
            "type": "integer",
            "description": "Total number of sells"
          },
          "average_sale_amount": {
            "type": "integer",
            "description": "Average sale amount in USD cents"
          },
          "commission_rate": {
            "type": "integer",
            "description": "Commission rate percentage"
          }
        },
        "title": "SellsSummary"
      },
      "Click": {
        "type": "object",
        "required": ["id", "product", "brand", "clicked_at"],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique click identifier"
          },
          "product": {
            "$ref": "#/components/schemas/Product",
            "description": "Product information"
          },
          "brand": {
            "$ref": "#/components/schemas/Brand",
            "description": "Brand information"
          },
          "clicked_at": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the click occurred"
          },
          "customer_id": {
            "anyOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "description": "Customer ID (if available)"
          },
          "referrer": {
            "anyOf": [
              { "type": "string" },
              { "type": "null" }
            ],
            "description": "Referrer URL"
          }
        },
        "title": "Click"
      },
      "PaginatedResponse_Click_": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/Click"
            },
            "type": "array",
            "title": "Items"
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginationMeta"
          }
        },
        "type": "object",
        "required": [
          "items",
          "pagination"
        ],
        "title": "PaginatedResponse[Click]"
      },
      "ClicksSummary": {
        "type": "object",
        "required": ["total_clicks", "unique_clicks"],
        "properties": {
          "total_clicks": {
            "type": "integer",
            "description": "Total number of clicks"
          },
          "unique_clicks": {
            "type": "integer",
            "description": "Number of unique clicks"
          },
          "click_through_rate": {
            "type": "number",
            "description": "Click-through rate percentage"
          },
          "average_clicks_per_day": {
            "type": "number",
            "description": "Average clicks per day"
          }
        },
        "title": "ClicksSummary"
      },
      "SellWebhook": {
        "type": "object",
        "required": ["event_type", "sell_data", "timestamp"],
        "properties": {
          "event_type": {
            "type": "string",
            "enum": ["sell"],
            "description": "Type of webhook event"
          },
          "sell_data": {
            "$ref": "#/components/schemas/Sell"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "ISO8601 timestamp of when the webhook was sent"
          },
          "webhook_id": {
            "type": "string",
            "description": "Unique webhook identifier"
          }
        },
        "title": "SellWebhook"
      },
      "CustomerAffiliationLinkRequest": {
        "type": "object",
        "required": ["customer_id", "product_id"],
        "properties": {
          "customer_id": {
            "type": "string",
            "description": "Customer ID"
          },
          "product_id": {
            "type": "string",
            "description": "Product ID"
          }
        },
        "title": "CustomerAffiliationLinkRequest"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    }
  }
}